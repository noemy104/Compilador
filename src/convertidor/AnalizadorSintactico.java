//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 09 18:46:00 COT 2015
//----------------------------------------------------
package convertidor;

import java_cup.runtime.*;
import javax.swing.JTextArea;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Mon Feb 09 18:46:00 COT 2015
 */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {
    public AnalizadorSintactico() {
        super();
    }
    JTextArea txtErrores; //agregamos el texto area para agrear los errores a la interfaz grafica
    public AnalizadorSintactico(java_cup.runtime.Scanner s, JTextArea txtErrores) {
        super(s);
        this.txtErrores = txtErrores;
    }
    public AnalizadorSintactico(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
                "\000\015\000\002\002\003\000\002\002\004\000\002\003"
                + "\004\000\002\004\003\000\002\004\003\000\002\004\003"
                + "\000\002\004\003\000\002\004\003\000\002\004\003\000"
                + "\002\004\003\000\002\004\003\000\002\004\003\000\002"
                + "\004\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
                "\000\020\000\026\004\017\005\020\006\007\007\010\010"
                + "\005\011\015\012\013\013\006\014\016\015\014\001\002"
                + "\000\004\002\022\001\002\000\004\016\ufffa\001\002\000"
                + "\004\016\ufff7\001\002\000\004\016\ufffc\001\002\000\004"
                + "\016\ufffb\001\002\000\004\016\021\001\002\000\004\002"
                + "\001\001\002\000\004\016\ufff8\001\002\000\004\016\ufff5"
                + "\001\002\000\004\016\ufff9\001\002\000\004\016\ufff6\001"
                + "\002\000\004\016\ufffe\001\002\000\004\016\ufffd\001\002"
                + "\000\004\002\uffff\001\002\000\004\002\000\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
                "\000\020\000\010\002\003\003\011\004\010\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$AnalizadorSintactico$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 1;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
        System.out.println("Mensaje: " + message);
        System.out.println("info: " + info.toString());
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            /* Comprueba si el numero de línea es mayor o igual que cero */
            if (s.left >= 0) {
                m.append(" en linea " + (s.left + 1));

                /*Comprueba si el numero de columna es mayor o igual que cero */
                if (s.right >= 0) {
                    m.append(", y columna " + (s.right + 1));
                }
            }
            if (info.toString().equals("#0")) {
                txtErrores.setText("..SENTENCIA MAL INGRESADA.. PROBLEMA DEL OPERADOR");
            } else {
                if (info.toString().equals("#12")) {
                    txtErrores.setText(("NO SE ACEPTAN PALABRAS EN MAYUSCULA") + "\n"
                            + ("NO SE ACEPTAN PALABRAS NO RESERVADAS"));
                }
            }
            if (info.toString().equals("#1")) {
                txtErrores.setText("..NO SE PUEDE INGRESAR DÍGITOS Y LETRAS MAYUSCULAS..");
            }

            m.append(" : " + message);
            System.err.println(m);
        }
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);

    }
    public String palabra;

    public String convertir(String cadena) {

        palabra = cadena.toUpperCase();
        return (cadena.toUpperCase());
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$AnalizadorSintactico$actions {

    private final AnalizadorSintactico parser;

    /**
     * Constructor
     */
    CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
            int CUP$AnalizadorSintactico$act_num,
            java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
            java.util.Stack CUP$AnalizadorSintactico$stack,
            int CUP$AnalizadorSintactico$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

        /* select the action based on the action number */
        switch (CUP$AnalizadorSintactico$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // palabra ::= variable 
            {
                Object RESULT = null;
                RESULT = "variable";
                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("palabra", 2, ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // palabra ::= codigo 
            {
                Object RESULT = null;
                RESULT = "codigo";
                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("palabra", 2, ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // palabra ::= simbolo 
            {
                Object RESULT = null;
                RESULT = "simnolo";
                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("palabra", 2, ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // palabra ::= herencia 
            {
                Object RESULT = null;
                RESULT = "herencia";
                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("palabra", 2, ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // palabra ::= lenguaje 
            {
                Object RESULT = null;
                RESULT = "lenguaje";
                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("palabra", 2, ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // palabra ::= atributo 
            {
                Object RESULT = null;
                RESULT = "atributo";
                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("palabra", 2, ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // palabra ::= programacion 
            {
                Object RESULT = null;
                RESULT = "programacion";
                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("palabra", 2, ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // palabra ::= java 
            {
                Object RESULT = null;
                RESULT = "java";
                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("palabra", 2, ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // palabra ::= metodo 
            {
                Object RESULT = null;
                RESULT = "metodo";
                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("palabra", 2, ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // palabra ::= clase 
            {
                Object RESULT = null;
                RESULT = "clase";
                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("palabra", 2, ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // sentencia ::= palabra CONVERTIR 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top - 1)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top - 1)).right;
                Object p = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top - 1)).value;
                RESULT = parser.convertir(p.toString());
                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia", 1, ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // $START ::= programa EOF 
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top - 1)).right;
                Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top - 1)).value;
                RESULT = start_val;
                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            /* ACCEPT */
            CUP$AnalizadorSintactico$parser.done_parsing();
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // programa ::= sentencia 
            {
                Object RESULT = null;
                int sleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).left;
                int sright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).right;
                Object s = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
                System.out.println(s);
                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("programa", 0, ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}
